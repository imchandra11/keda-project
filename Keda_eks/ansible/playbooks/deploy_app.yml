# ansible/playbooks/deploy_app.yml
---
- name: Build and deploy application to EKS
  hosts: management
  become: false
  
  vars:
    aws_region: "{{ lookup('env', 'AWS_REGION') | default('us-west-2', true) }}"
    ecr_repository_name: "{{ lookup('env', 'ECR_REPO_NAME') | default('keda-app', true) }}"
    sqs_queue_name: "{{ lookup('env', 'SQS_QUEUE_NAME') | default('keda-queue', true) }}"
  
  tasks:
    - name: Create app directory
      file:
        path: ~/keda-app
        state: directory
        mode: '0755'
    
    - name: Create app.py
      copy:
        dest: ~/keda-app/app.py
        content: |
          from flask import Flask, jsonify
          import os
          import boto3
          import json
          import time
          
          app = Flask(__name__)
          
          # Get SQS queue URL from environment variables
          SQS_QUEUE_URL = os.environ.get('SQS_QUEUE_URL')
          
          @app.route('/')
          def home():
              return jsonify({
                  'message': 'KEDA SQS Consumer is running',
                  'pod_name': os.environ.get('POD_NAME', 'unknown')
              })
          
          @app.route('/health')
          def health():
              return jsonify({'status': 'healthy'})
          
          def process_message(message):
              # Process message here - this is where you would do your actual work
              print(f"Processing message: {message}")
              # Simulate work taking time
              time.sleep(1)
              print(f"Finished processing message: {message}")
          
          def poll_sqs_messages():
              sqs = boto3.client('sqs')
              while True:
                  try:
                      # Receive message from SQS queue
                      response = sqs.receive_message(
                          QueueUrl=SQS_QUEUE_URL,
                          MaxNumberOfMessages=1,
                          WaitTimeSeconds=20
                      )
                      
                      messages = response.get('Messages', [])
                      for message in messages:
                          # Process the message
                          body = json.loads(message['Body'])
                          process_message(body)
                          
                          # Delete the message from the queue
                          sqs.delete_message(
                              QueueUrl=SQS_QUEUE_URL,
                              ReceiptHandle=message['ReceiptHandle']
                          )
                  except Exception as e:
                      print(f"Error processing SQS message: {str(e)}")
                      time.sleep(5)
          
          if __name__ == '__main__':
              import threading
              
              # Start SQS polling in a separate thread
              t = threading.Thread(target=poll_sqs_messages)
              t.daemon = True
              t.start()
              
              # Start Flask app
              app.run(host='0.0.0.0', port=8080)
        mode: '0644'
    
    - name: Create Dockerfile
      copy:
        dest: ~/keda-app/Dockerfile
        content: |
          FROM python:3.9-slim
          
          WORKDIR /app
          
          COPY app.py .
          
          RUN pip install flask boto3
          
          EXPOSE 8080
          
          CMD ["python", "app.py"]
        mode: '0644'
    
    - name: Get AWS Account ID
      command: aws sts get-caller-identity --query Account --output text
      register: aws_account_id
      changed_when: false
    
    - name: Build and push Docker image
      shell: |
        cd ~/keda-app
        aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region }}.amazonaws.com
        aws ecr create-repository --repository-name {{ ecr_repository_name }} || true
        docker build -t {{ ecr_repository_name }}:latest .
        docker tag {{ ecr_repository_name }}:latest {{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_repository_name }}:latest
        docker push {{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_repository_name }}:latest
      changed_when: true
    
    - name: Get SQS queue URL
      command: aws sqs get-queue-url --queue-name {{ sqs_queue_name }} --query QueueUrl --output text
      register: sqs_queue_url
      changed_when: false
    
    - name: Create Kubernetes manifests
      block:
        - name: Create deployment.yaml
          copy:
            dest: ~/keda-app/deployment.yaml
            content: |
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: keda-app
                labels:
                  app: keda-app
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: keda-app
                template:
                  metadata:
                    labels:
                      app: keda-app
                  spec:
                    containers:
                    - name: keda-app
                      image: {{ aws_account_id.stdout }}.dkr.ecr.{{ aws_region }}.amazonaws.com/{{ ecr_repository_name }}:latest
                      ports:
                      - containerPort: 8080
                      env:
                      - name: SQS_QUEUE_URL
                        value: "{{ sqs_queue_url.stdout }}"
                      - name: POD_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.name
                      resources:
                        requests:
                          memory: "128Mi"
                          cpu: "100m"
                        limits:
                          memory: "256Mi"
                          cpu: "200m"
                      readinessProbe:
                        httpGet:
                          path: /health
                          port: 8080
                        initialDelaySeconds: 5
                        periodSeconds: 5
            mode: '0644'
        
        - name: Create service.yaml
          copy:
            dest: ~/keda-app/service.yaml
            content: |
              apiVersion: v1
              kind: Service
              metadata:
                name: keda-app
              spec:
                selector:
                  app: keda-app
                ports:
                - port: 80
                  targetPort: 8080
                type: ClusterIP
            mode: '0644'
        
        - name: Create scaled-object.yaml for KEDA
          copy:
            dest: ~/keda-app/scaled-object.yaml
            content: |
              apiVersion: keda.sh/v1alpha1
              kind: ScaledObject
              metadata:
                name: keda-app-scaler
                namespace: default
              spec:
                scaleTargetRef:
                  name: keda-app
                minReplicaCount: 1
                maxReplicaCount: 10
                pollingInterval: 15
                cooldownPeriod: 30
                triggers:
                - type: aws-sqs-queue
                  metadata:
                    queueURL: "{{ sqs_queue_url.stdout }}"
                    queueLength: "5"
                    awsRegion: "{{ aws_region }}"
            mode: '0644'
    
    - name: Deploy application to Kubernetes
      shell: |
        kubectl apply -f ~/keda-app/serviceaccount.yaml
        kubectl apply -f ~/keda-app/deployment.yaml
        kubectl apply -f ~/keda-app/service.yaml
        kubectl apply -f ~/keda-app/scaled-object.yaml
      changed_when: true
